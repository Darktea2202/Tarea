// ===================================================================
// ALGORITMO DE ORDENAMIENTO: BUBBLE SORT
// ===================================================================

/**
 * Bubble Sort - Ordenamiento Burbuja
 * 
 * FUNCIONAMIENTO (Como burbujas que suben a la superficie):
 * 1. Compara pares de elementos adyacentes
 * 2. Si est√°n en orden incorrecto, los intercambia
 * 3. Repite el proceso recorriendo todo el array
 * 4. En cada pasada, el elemento m√°s grande "burbujea" hacia el final
 * 5. Contin√∫a hasta que no se necesiten m√°s intercambios
 * 
 * COMPLEJIDAD:
 * - Mejor caso: O(n) - cuando el array ya est√° ordenado (versi√≥n optimizada)
 * - Caso promedio: O(n¬≤)
 * - Peor caso: O(n¬≤) - cuando el array est√° ordenado en reversa
 * - Espacio: O(1) - ordena in-place
 */

// ===================================================================
// IMPLEMENTACI√ìN B√ÅSICA
// ===================================================================

function bubbleSort(arr) {
    const n = arr.length; // Guardamos la longitud para evitar c√°lculos repetidos
    
    // BUCLE EXTERNO: Controla el n√∫mero de pasadas
    // Necesitamos n-1 pasadas para garantizar que todo est√© ordenado
    for (let i = 0; i < n - 1; i++) {
        
        // BUCLE INTERNO: Compara elementos adyacentes
        // En cada pasada, el √∫ltimo elemento ya est√° en su posici√≥n correcta
        // Por eso usamos (n - 1 - i) para reducir comparaciones innecesarias
        for (let j = 0; j < n - 1 - i; j++) {
            
            // COMPARACI√ìN: Si el elemento actual es mayor que el siguiente
            if (arr[j] > arr[j + 1]) {
                
                // INTERCAMBIO: Usamos destructuring para intercambiar elementos
                // Esta es la "burbuja" subiendo: el elemento mayor se mueve hacia el final
                [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];
            }
        }
        
        // DESPU√âS DE CADA PASADA:
        // El elemento m√°s grande de la parte no ordenada est√° ahora en su posici√≥n final
        // Los √∫ltimos (i + 1) elementos est√°n correctamente ordenados
    }
    
    return arr; // Retornamos el array completamente ordenado
}

// ===================================================================
// VERSI√ìN CON EXPLICACI√ìN PASO A PASO
// ===================================================================

function bubbleSortConPasos(arr) {
    console.log("ü´ß ARRAY INICIAL:", arr);
    console.log("‚ïê".repeat(60));
    console.log("üí° Concepto: Los elementos grandes 'burbujean' hacia el final\n");
    
    const n = arr.length;
    let totalIntercambios = 0; // Contador para estad√≠sticas
    
    // BUCLE DE PASADAS: Cada pasada mueve un elemento a su posici√≥n final
    for (let i = 0; i < n - 1; i++) {
        
        console.log(`üîÑ PASADA ${i + 1}:`);
        console.log(`üìç Buscando el ${i + 1}¬∞ elemento m√°s grande`);
        
        let intercambiosEnPasada = 0; // Contador para esta pasada espec√≠fica
        
        // BUCLE DE COMPARACIONES: Comparamos elementos adyacentes
        for (let j = 0; j < n - 1 - i; j++) {
            
            // MOSTRAR COMPARACI√ìN ACTUAL
            console.log(`  üîç Comparando ${arr[j]} y ${arr[j + 1]} (posiciones ${j} y ${j + 1})`);
            
            // DECISI√ìN DE INTERCAMBIO
            if (arr[j] > arr[j + 1]) {
                
                console.log(`    ‚ÜîÔ∏è ${arr[j]} > ${arr[j + 1]}, intercambiando...`);
                
                // INTERCAMBIO CON EXPLICACI√ìN
                [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];
                intercambiosEnPasada++;
                totalIntercambios++;
                
                // MOSTRAR RESULTADO DEL INTERCAMBIO
                console.log(`    ‚úÖ Resultado: [${arr.join(', ')}]`);
                
            } else {
                console.log(`    ‚úÖ ${arr[j]} ‚â§ ${arr[j + 1]}, ya est√°n en orden correcto`);
            }
        }
        
        // RESUMEN DE LA PASADA
        const elementoColocado = arr[n - 1 - i];
        console.log(`  üéØ Elemento ${elementoColocado} colocado en posici√≥n final ${n - 1 - i}`);
        console.log(`  üìä Intercambios en esta pasada: ${intercambiosEnPasada}`);
        console.log(`  üèÅ Estado despu√©s de pasada ${i + 1}: [${arr.join(', ')}]`);
        
        // MOSTRAR PROGRESO VISUAL
        const parteOrdenada = arr.slice(n - 1 - i);
        const parteNoOrdenada = arr.slice(0, n - 1 - i);
        console.log(`  üìà Parte no ordenada: [${parteNoOrdenada.join(', ')}]`);
        console.log(`  ‚úÖ Parte ordenada: [${parteOrdenada.join(', ')}]`);
        console.log("‚îÄ".repeat(50));
    }
    
    console.log(`üéâ ARRAY FINAL ORDENADO: [${arr.join(', ')}]`);
    console.log(`üìä Total de intercambios realizados: ${totalIntercambios}`);
    return arr;
}

// ===================================================================
// VERSI√ìN OPTIMIZADA (DETECTA ARRAYS YA ORDENADOS)
// ===================================================================

function bubbleSortOptimizado(arr) {
    const n = arr.length;
    
    // BUCLE DE PASADAS con posibilidad de terminaci√≥n temprana
    for (let i = 0; i < n - 1; i++) {
        
        // BANDERA DE OPTIMIZACI√ìN: Detecta si el array ya est√° ordenado
        let huboCambios = false;
        
        // BUCLE DE COMPARACIONES
        for (let j = 0; j < n - 1 - i; j++) {
            
            if (arr[j] > arr[j + 1]) {
                // INTERCAMBIO Y MARCAMOS QUE HUBO CAMBIOS
                [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];
                huboCambios = true; // Indicamos que se realiz√≥ al menos un intercambio
            }
        }
        
        // OPTIMIZACI√ìN: Si no hubo intercambios, el array ya est√° ordenado
        if (!huboCambios) {
            console.log(`‚ú® Optimizaci√≥n: Array ordenado despu√©s de ${i + 1} pasada(s)`);
            break; // Terminamos el algoritmo tempranamente
        }
    }
    
    return arr;
}

// ===================================================================
// VERSI√ìN BIDIRECCIONAL (COCKTAIL SHAKER SORT)
// ===================================================================

function cocktailShakerSort(arr) {
    console.log("üç∏ Cocktail Shaker Sort (Bubble Sort bidireccional)");
    console.log("üí° Burbujea en ambas direcciones en cada pasada");
    
    let inicio = 0;
    let fin = arr.length - 1;
    let huboCambios = true;
    
    while (huboCambios) {
        huboCambios = false;
        
        // PASADA HACIA LA DERECHA: Mueve el mayor hacia el final
        console.log(`‚û°Ô∏è Pasada hacia la derecha (${inicio} ‚Üí ${fin})`);
        for (let i = inicio; i < fin; i++) {
            if (arr[i] > arr[i + 1]) {
                [arr[i], arr[i + 1]] = [arr[i + 1], arr[i]];
                huboCambios = true;
                console.log(`  ‚ÜîÔ∏è Intercambio: [${arr.join(', ')}]`);
            }
        }
        
        // Si no hubo cambios en la primera direcci√≥n, ya est√° ordenado
        if (!huboCambios) break;
        
        // REDUCIR EL RANGO: El √∫ltimo elemento ya est√° en su lugar
        fin--;
        huboCambios = false;
        
        // PASADA HACIA LA IZQUIERDA: Mueve el menor hacia el inicio
        console.log(`‚¨ÖÔ∏è Pasada hacia la izquierda (${fin} ‚Üí ${inicio})`);
        for (let i = fin; i > inicio; i--) {
            if (arr[i] < arr[i - 1]) {
                [arr[i], arr[i - 1]] = [arr[i - 1], arr[i]];
                huboCambios = true;
                console.log(`  ‚ÜîÔ∏è Intercambio: [${arr.join(', ')}]`);
            }
        }
        
        // REDUCIR EL RANGO: El primer elemento ya est√° en su lugar
        inicio++;
        
        console.log(`üìä Rango actual: [${inicio}..${fin}]`);
        console.log("‚îÄ".repeat(30));
    }
    
    return arr;
}

// ===================================================================
// VERSIONES PARA DIFERENTES TIPOS DE DATOS
// ===================================================================

// BUBBLE SORT PARA STRINGS
function bubbleSortStrings(arr) {
    const n = arr.length;
    
    for (let i = 0; i < n - 1; i++) {
        for (let j = 0; j < n - 1 - i; j++) {
            
            // COMPARACI√ìN LEXICOGR√ÅFICA: JavaScript compara strings alfab√©ticamente
            if (arr[j].localeCompare(arr[j + 1]) > 0) {
                [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];
            }
        }
    }
    
    return arr;
}

// BUBBLE SORT PARA OBJETOS
function bubbleSortObjetos(arr, propiedad) {
    const n = arr.length;
    
    for (let i = 0; i < n - 1; i++) {
        for (let j = 0; j < n - 1 - i; j++) {
            
            // COMPARACI√ìN POR PROPIEDAD: Accedemos a la propiedad espec√≠fica
            if (arr[j][propiedad] > arr[j + 1][propiedad]) {
                [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];
            }
        }
    }
    
    return arr;
}

// BUBBLE SORT DESCENDENTE
function bubbleSortDescendente(arr) {
    const n = arr.length;
    
    for (let i = 0; i < n - 1; i++) {
        for (let j = 0; j < n - 1 - i; j++) {
            
            // COMPARACI√ìN INVERSA: Buscamos elementos menores para intercambiar
            if (arr[j] < arr[j + 1]) {
                [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];
            }
        }
    }
    
    return arr;
}

// ===================================================================
// VERSI√ìN CON FUNCI√ìN DE COMPARACI√ìN PERSONALIZADA
// ===================================================================

function bubbleSortConComparador(arr, funcionComparacion) {
    const n = arr.length;
    
    // FUNCI√ìN DE COMPARACI√ìN: Similar a Array.sort()
    // Retorna: negativo si a < b, positivo si a > b, cero si a === b
    const comparar = funcionComparacion || ((a, b) => a - b);
    
    for (let i = 0; i < n - 1; i++) {
        let huboCambios = false;
        
        for (let j = 0; j < n - 1 - i; j++) {
            
            // USAR FUNCI√ìN DE COMPARACI√ìN PERSONALIZADA
            if (comparar(arr[j], arr[j + 1]) > 0) {
                [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];
                huboCambios = true;
            }
        }
        
        if (!huboCambios) break; // Optimizaci√≥n
    }
    
    return arr;
}

// ===================================================================
// EJEMPLOS DE USO
// ===================================================================

console.log("ü´ß EJEMPLOS DE BUBBLE SORT");
console.log("‚ïê".repeat(60));

// Ejemplo 1: Caso b√°sico con n√∫meros
console.log("\n1Ô∏è‚É£ EJEMPLO B√ÅSICO:");
const numeros = [64, 34, 25, 12, 22, 11, 90];
console.log("Original:", numeros);
console.log("Ordenado:", bubbleSort([...numeros]));

// Ejemplo 2: Con explicaci√≥n paso a paso
console.log("\n2Ô∏è‚É£ EJEMPLO CON PASOS DETALLADOS:");
const numerosConPasos = [5, 2, 8, 1];
bubbleSortConPasos([...numerosConPasos]);

// Ejemplo 3: Versi√≥n optimizada
console.log("\n3Ô∏è‚É£ VERSI√ìN OPTIMIZADA (Array casi ordenado):");
const numerosOptimizado = [1, 2, 3, 5, 4]; // Solo 4 y 5 est√°n intercambiados
console.log("Original:", numerosOptimizado);
console.log("Resultado:", bubbleSortOptimizado([...numerosOptimizado]));

// Ejemplo 4: Cocktail Shaker Sort
console.log("\n4Ô∏è‚É£ COCKTAIL SHAKER SORT:");
const numerosCocktail = [6, 3, 8, 2, 9, 1];
console.log("Original:", numerosCocktail);
cocktailShakerSort([...numerosCocktail]);

// Ejemplo 5: Ordenamiento de strings
console.log("\n5Ô∏è‚É£ ORDENAMIENTO DE STRINGS:");
const nombres = ["Carlos", "Ana", "Luis", "Beatriz", "David"];
console.log("Original:", nombres);
console.log("Ordenado:", bubbleSortStrings([...nombres]));

// Ejemplo 6: Ordenamiento de objetos
console.log("\n6Ô∏è‚É£ ORDENAMIENTO DE OBJETOS:");
const estudiantes = [
    { nombre: "Juan", edad: 20, calificacion: 85 },
    { nombre: "Mar√≠a", edad: 18, calificacion: 92 },
    { nombre: "Pedro", edad: 22, calificacion: 78 },
    { nombre: "Ana", edad: 19, calificacion: 96 }
];
console.log("Original:", estudiantes);
console.log("Por edad:", bubbleSortObjetos([...estudiantes], 'edad'));
console.log("Por calificaci√≥n:", bubbleSortObjetos([...estudiantes], 'calificacion'));

// Ejemplo 7: Ordenamiento descendente
console.log("\n7Ô∏è‚É£ ORDENAMIENTO DESCENDENTE:");
const numerosDesc = [3, 7, 1, 9, 4];
console.log("Original:", numerosDesc);
console.log("Descendente:", bubbleSortDescendente([...numerosDesc]));

// Ejemplo 8: Con funci√≥n de comparaci√≥n personalizada
console.log("\n8Ô∏è‚É£ COMPARACI√ìN PERSONALIZADA:");
const palabras = ["apple", "pie", "a", "elephant"];
console.log("Original:", palabras);

// Ordenar por longitud de palabra
console.log("Por longitud:", bubbleSortConComparador([...palabras], (a, b) => a.length - b.length));

// Ordenar por √∫ltima letra
console.log("Por √∫ltima letra:", bubbleSortConComparador([...palabras], 
    (a, b) => a[a.length - 1].localeCompare(b[b.length - 1])));

// Ejemplo 9: Casos especiales
console.log("\n9Ô∏è‚É£ CASOS ESPECIALES:");
console.log("Array vac√≠o:", bubbleSort([]));
console.log("Un elemento:", bubbleSort([42]));
console.log("Ya ordenado:", bubbleSort([1, 2, 3, 4, 5]));
console.log("Ordenado inverso:", bubbleSort([5, 4, 3, 2, 1]));
console.log("Elementos duplicados:", bubbleSort([3, 1, 4, 1, 5, 9, 2, 6, 5]));

// ===================================================================
// AN√ÅLISIS DE RENDIMIENTO
// ===================================================================

function analizarRendimientoBubble() {
    console.log("\nüìä AN√ÅLISIS DE RENDIMIENTO:");
    console.log("‚ïê".repeat(50));
    
    const tama√±os = [100, 500, 1000, 2000];
    
    tama√±os.forEach(tama√±o => {
        console.log(`\nüîç Probando con ${tama√±o} elementos:`);
        
        // CASO PROMEDIO: Array aleatorio
        const arrAleatorio = Array.from({length: tama√±o}, () => Math.floor(Math.random() * 1000));
        let inicio = performance.now();
        bubbleSort([...arrAleatorio]);
        let fin = performance.now();
        console.log(`  Aleatorio: ${(fin - inicio).toFixed(2)} ms`);
        
        // MEJOR CASO: Array ya ordenado con versi√≥n optimizada
        const arrOrdenado = Array.from({length: tama√±o}, (_, i) => i);
        inicio = performance.now();
        bubbleSortOptimizado([...arrOrdenado]);
        fin = performance.now();
        console.log(`  Ya ordenado (optimizado): ${(fin - inicio).toFixed(2)} ms`);
        
        // PEOR CASO: Array ordenado en reversa
        const arrReversa = Array.from({length: tama√±o}, (_, i) => tama√±o - i);
        inicio = performance.now();
        bubbleSort([...arrReversa]);
        fin = performance.now();
        console.log(`  Reversa: ${(fin - inicio).toFixed(2)} ms`);
        
        // CASO CASI ORDENADO
        const arrCasiOrdenado = [...arrOrdenado];
        // Intercambiar algunos elementos
        for (let i = 0; i < tama√±o * 0.05; i++) {
            const pos1 = Math.floor(Math.random() * tama√±o);
            const pos2 = Math.floor(Math.random() * tama√±o);
            [arrCasiOrdenado[pos1], arrCasiOrdenado[pos2]] = [arrCasiOrdenado[pos2], arrCasiOrdenado[pos1]];
        }
        inicio = performance.now();
        bubbleSortOptimizado([...arrCasiOrdenado]);
        fin = performance.now();
        console.log(`  Casi ordenado: ${(fin - inicio).toFixed(2)} ms`);
    });
}

analizarRendimientoBubble();

// ===================================================================
// COMPARACI√ìN CON OTROS ALGORITMOS
// ===================================================================

console.log("\nüÜö COMPARACI√ìN DE ALGORITMOS:");
console.log("‚ïê".repeat(40));

const arrayComparacion = Array.from({length: 1000}, () => Math.floor(Math.random() * 1000));

// Bubble Sort b√°sico
let inicio = performance.now();
bubbleSort([...arrayComparacion]);
let fin = performance.now();
console.log(`Bubble Sort b√°sico: ${(fin - inicio).toFixed(2)} ms`);

// Bubble Sort optimizado
inicio = performance.now();
bubbleSortOptimizado([...arrayComparacion]);
fin = performance.now();
console.log(`Bubble Sort optimizado: ${(fin - inicio).toFixed(2)} ms`);

// Cocktail Shaker Sort
inicio = performance.now();
cocktailShakerSort([...arrayComparacion]);
fin = performance.now();
console.log(`Cocktail Shaker Sort: ${(fin - inicio).toFixed(2)} ms`);

// Array.sort() nativo
inicio = performance.now();
[...arrayComparacion].sort((a, b) => a - b);
fin = performance.now();
console.log(`Array.sort() nativo: ${(fin - inicio).toFixed(2)} ms`);

// ===================================================================
// VISUALIZACI√ìN DEL PROCESO
// ===================================================================

function visualizarBubbleSort(arr) {
    console.log("\nüé® VISUALIZACI√ìN DEL PROCESO:");
    console.log("‚ïê".repeat(40));
    
    const n = arr.length;
    const copia = [...arr];
    
    console.log(`üìä Array inicial: [${copia.join(', ')}]`);
    
    for (let i = 0; i < n - 1; i++) {
        console.log(`\nüîÑ Pasada ${i + 1}:`);
        
        for (let j = 0; j < n - 1 - i; j++) {
            // CREAR REPRESENTACI√ìN VISUAL
            const visual = copia.map((val, idx) => {
                if (idx === j) return `(${val})`;      // Elemento que estamos comparando
                if (idx === j + 1) return `[${val}]`; // Elemento con el que comparamos
                if (idx >= n - i) return `*${val}*`;  // Elementos ya ordenados
                return val.toString();
            });
            
            console.log(`  ${visual.join(' ')}`);
            
            if (copia[j] > copia[j + 1]) {
                [copia[j], copia[j + 1]] = [copia[j + 1], copia[j]];
                console.log(`  ‚ÜîÔ∏è Intercambio realizado`);
            } else {
                console.log(`  ‚úÖ Ya en orden`);
            }
        }
        
        const finalVisual = copia.map((val, idx) => {
            if (idx >= n - 1 - i) return `*${val}*`; // Elementos ordenados
            return val.toString();
        }).join(' ');
        
        console.log(`  üèÅ Final de pasada: ${finalVisual}`);
    }
    
    console.log(`\nüéâ Resultado final: [${copia.join(', ')}]`);
    return copia;
}

// Ejemplo de visualizaci√≥n
console.log("\nüé® EJEMPLO DE VISUALIZACI√ìN:");
visualizarBubbleSort([5, 2, 8, 1, 9]);

// ===================================================================
// VENTAJAS Y DESVENTAJAS
// ===================================================================

console.log("\n‚úÖ VENTAJAS DEL BUBBLE SORT:");
console.log("‚Ä¢ Implementaci√≥n extremadamente simple");
console.log("‚Ä¢ F√°cil de entender y explicar");
console.log("‚Ä¢ Es estable: mantiene orden relativo de elementos iguales");
console.log("‚Ä¢ Ordena in-place: usa solo O(1) memoria extra");
console.log("‚Ä¢ Detecta arrays ya ordenados (versi√≥n optimizada)");
console.log("‚Ä¢ Funciona con cualquier tipo de datos comparables");
console.log("‚Ä¢ Bueno para fines educativos");

console.log("\n‚ùå DESVENTAJAS DEL BUBBLE SORT:");
console.log("‚Ä¢ Muy ineficiente: O(n¬≤) en casi todos los casos");
console.log("‚Ä¢ Muchos intercambios innecesarios");
console.log("‚Ä¢ Muy lento para arrays grandes");
console.log("‚Ä¢ No aprovecha estructuras de datos parcialmente ordenadas");
console.log("‚Ä¢ Uno de los algoritmos de ordenamiento m√°s lentos");

console.log("\nüíº CU√ÅNDO USAR BUBBLE SORT:");
console.log("‚Ä¢ NUNCA en producci√≥n para arrays grandes");
console.log("‚Ä¢ Para ense√±ar conceptos de ordenamiento");
console.log("‚Ä¢ Arrays muy peque√±os (< 10 elementos) donde la simplicidad importa m√°s");
console.log("‚Ä¢ Como ejercicio acad√©mico");
console.log("‚Ä¢ Cuando necesitas el algoritmo m√°s simple posible");

console.log("\nüîß OPTIMIZACIONES POSIBLES:");
console.log("‚Ä¢ Detecci√≥n temprana de arrays ordenados");
console.log("‚Ä¢ Bubble Sort bidireccional (Cocktail Shaker)");
console.log("‚Ä¢ Reducir rango en cada pasada");
console.log("‚Ä¢ Cambiar a algoritmos m√°s eficientes para arrays grandes");

console.log("\nüìö VARIANTES IMPORTANTES:");
console.log("‚Ä¢ Cocktail Shaker Sort: burbujea en ambas direcciones");
console.log("‚Ä¢ Odd-even Sort: versi√≥n paralelizable");
console.log("‚Ä¢ Bubble Sort adaptativo: se adapta a datos parcialmente ordenados");

console.log("\nüéì VALOR EDUCATIVO:");
console.log("‚Ä¢ Perfecto para entender conceptos de ordenamiento");
console.log("‚Ä¢ Muestra claramente la complejidad O(n¬≤)");
console.log("‚Ä¢ Demuestra la importancia de optimizaciones");
console.log("‚Ä¢ Base para entender algoritmos m√°s complejos");