// ===================================================================
// ALGORITMO DE ORDENAMIENTO: SELECTION SORT
// ===================================================================

/**
 * Selection Sort - Ordenamiento por Selecci√≥n
 * 
 * FUNCIONAMIENTO:
 * 1. Encuentra el elemento m√°s peque√±o del array
 * 2. Lo intercambia con el primer elemento
 * 3. Encuentra el segundo elemento m√°s peque√±o
 * 4. Lo intercambia con el segundo elemento
 * 5. Repite hasta ordenar todo el array
 * 
 * COMPLEJIDAD:
 * - Tiempo: O(n¬≤) en todos los casos
 * - Espacio: O(1) - ordena in-place
 */

// ===================================================================
// IMPLEMENTACI√ìN B√ÅSICA
// ===================================================================

function selectionSort(arr) {
    const n = arr.length; // Guardamos la longitud del array para no calcularla en cada iteraci√≥n
    
    // BUCLE EXTERNO: Recorre cada posici√≥n del array que necesita ser ordenada
    // Nota: Solo vamos hasta n-1 porque el √∫ltimo elemento ya estar√° ordenado autom√°ticamente
    for (let i = 0; i < n - 1; i++) {
        
        // PASO 1: Asumimos que el elemento actual es el m√≠nimo
        let minIndex = i;
        
        // BUCLE INTERNO: Busca el elemento m√°s peque√±o en la parte no ordenada
        // Empieza desde i+1 porque los elementos anteriores ya est√°n ordenados
        for (let j = i + 1; j < n; j++) {
            
            // COMPARACI√ìN: Si encontramos un elemento menor al m√≠nimo actual
            if (arr[j] < arr[minIndex]) {
                minIndex = j; // Actualizamos el √≠ndice del m√≠nimo
            }
        }
        
        // PASO 2: Solo intercambiamos si encontramos un elemento menor
        // Esto evita intercambios innecesarios cuando el elemento ya est√° en su lugar
        if (minIndex !== i) {
            // INTERCAMBIO: Usamos destructuring para intercambiar elementos
            [arr[i], arr[minIndex]] = [arr[minIndex], arr[i]];
        }
    }
    
    return arr; // Retornamos el array ordenado
}

// ===================================================================
// VERSI√ìN CON EXPLICACI√ìN PASO A PASO
// ===================================================================

function selectionSortConPasos(arr) {
    // MENSAJE INICIAL: Mostramos el array original antes de empezar
    console.log("üî¢ ARRAY INICIAL:", arr);
    console.log("‚ïê".repeat(50));
    
    const n = arr.length;
    
    // BUCLE PRINCIPAL: Recorre cada posici√≥n que necesita ser ordenada
    for (let i = 0; i < n - 1; i++) {
        // INFORMACI√ìN DEL PASO: Explicamos qu√© estamos haciendo en esta iteraci√≥n
        console.log(`\nüìç PASO ${i + 1}:`);
        console.log(`Buscando el m√≠nimo desde posici√≥n ${i}`);
        
        // INICIALIZACI√ìN: Empezamos asumiendo que el elemento actual es el m√≠nimo
        let minIndex = i;
        let minValue = arr[i]; // Guardamos el valor para mostrarlo en mensajes
        
        // B√öSQUEDA DEL M√çNIMO: Recorremos la parte no ordenada del array
        for (let j = i + 1; j < n; j++) {
            // COMPARACI√ìN: Si encontramos un elemento menor
            if (arr[j] < arr[minIndex]) {
                minIndex = j;           // Actualizamos el √≠ndice del m√≠nimo
                minValue = arr[j];      // Actualizamos el valor del m√≠nimo
                // FEEDBACK VISUAL: Informamos cuando encontramos un nuevo m√≠nimo
                console.log(`  ‚û°Ô∏è Nuevo m√≠nimo encontrado: ${minValue} en posici√≥n ${j}`);
            }
        }
        
        // INTERCAMBIO: Solo si necesitamos mover el elemento
        if (minIndex !== i) {
            // ANTES DEL INTERCAMBIO: Mostramos qu√© elementos vamos a intercambiar
            [arr[i], arr[minIndex]] = [arr[minIndex], arr[i]];
            console.log(`  üîÑ Intercambiando ${arr[minIndex]} (pos ${minIndex}) con ${arr[i]} (pos ${i})`);
        } else {
            // CASO SIN INTERCAMBIO: El elemento ya est√° en su posici√≥n correcta
            console.log(`  ‚úÖ El elemento ${arr[i]} ya est√° en su posici√≥n correcta`);
        }
        
        // ESTADO ACTUAL: Mostramos c√≥mo queda el array despu√©s de este paso
        console.log(`  üìä Array actual: [${arr.join(', ')}]`);
    }
    
    // RESULTADO FINAL: Confirmamos que el array est√° completamente ordenado
    console.log("\nüéâ ARRAY FINAL ORDENADO:", arr);
    return arr;
}

// ===================================================================
// VERSI√ìN PARA ORDENAMIENTO DESCENDENTE
// ===================================================================

function selectionSortDescendente(arr) {
    const n = arr.length;
    
    // MISMO ALGORITMO pero buscamos el M√ÅXIMO en lugar del m√≠nimo
    for (let i = 0; i < n - 1; i++) {
        // INICIALIZACI√ìN: Asumimos que el elemento actual es el m√°ximo
        let maxIndex = i;
        
        // B√öSQUEDA DEL M√ÅXIMO: Recorremos la parte no ordenada
        for (let j = i + 1; j < n; j++) {
            // COMPARACI√ìN INVERSA: Buscamos elementos MAYORES (no menores)
            if (arr[j] > arr[maxIndex]) {
                maxIndex = j; // Actualizamos el √≠ndice del m√°ximo
            }
        }
        
        // INTERCAMBIO: Solo si encontramos un elemento mayor
        if (maxIndex !== i) {
            [arr[i], arr[maxIndex]] = [arr[maxIndex], arr[i]];
        }
    }
    
    return arr; // Retorna el array ordenado de mayor a menor
}

// ===================================================================
// VERSI√ìN PARA OBJETOS
// ===================================================================

function selectionSortObjetos(arr, key) {
    const n = arr.length;
    
    // ORDENAMIENTO POR PROPIEDAD: Podemos ordenar objetos por cualquier propiedad
    for (let i = 0; i < n - 1; i++) {
        // INICIALIZACI√ìN: El objeto actual tiene el valor m√≠nimo de la propiedad
        let minIndex = i;
        
        // B√öSQUEDA: Comparamos la propiedad espec√≠fica de cada objeto
        for (let j = i + 1; j < n; j++) {
            // ACCESO A PROPIEDAD: Usamos notaci√≥n de corchetes para acceder din√°micamente
            // arr[j][key] obtiene el valor de la propiedad 'key' del objeto en posici√≥n j
            if (arr[j][key] < arr[minIndex][key]) {
                minIndex = j; // Encontramos un objeto con menor valor en esa propiedad
            }
        }
        
        // INTERCAMBIO DE OBJETOS: Movemos objetos completos, no solo valores
        if (minIndex !== i) {
            [arr[i], arr[minIndex]] = [arr[minIndex], arr[i]];
        }
    }
    
    return arr; // Retorna el array de objetos ordenado por la propiedad especificada
}

// ===================================================================
// EJEMPLOS DE USO
// ===================================================================

console.log("üöÄ EJEMPLOS DE SELECTION SORT");
console.log("‚ïê".repeat(60));

// Ejemplo 1: Array de n√∫meros desordenados
console.log("\n1Ô∏è‚É£ EJEMPLO B√ÅSICO:");
const numeros = [64, 34, 25, 12, 22, 11, 90];
console.log("Original:", numeros);
// IMPORTANTE: Usamos [...numeros] para crear una copia y no modificar el original
console.log("Ordenado:", selectionSort([...numeros]));

// Ejemplo 2: Con explicaci√≥n paso a paso
console.log("\n2Ô∏è‚É£ EJEMPLO CON PASOS:");
const numerosConPasos = [5, 2, 8, 1, 9];
// DEMOSTRACI√ìN EDUCATIVA: Esta funci√≥n muestra cada paso del proceso
selectionSortConPasos([...numerosConPasos]);

// Ejemplo 3: Ordenamiento descendente
console.log("\n3Ô∏è‚É£ ORDENAMIENTO DESCENDENTE:");
const numerosDesc = [3, 7, 1, 9, 4];
console.log("Original:", numerosDesc);
// VARIACI√ìN: Misma l√≥gica pero ordena de mayor a menor
console.log("Descendente:", selectionSortDescendente([...numerosDesc]));

// Ejemplo 4: Array de strings
console.log("\n4Ô∏è‚É£ ORDENAMIENTO DE STRINGS:");
const nombres = ["Carlos", "Ana", "Luis", "Beatriz", "David"];
console.log("Original:", nombres);
// FUNCIONA CON STRINGS: JavaScript compara strings lexicogr√°ficamente (alfab√©ticamente)
console.log("Ordenado:", selectionSort([...nombres]));

// Ejemplo 5: Array de objetos
console.log("\n5Ô∏è‚É£ ORDENAMIENTO DE OBJETOS:");
const estudiantes = [
    { nombre: "Juan", edad: 20 },     // Objeto con propiedades nombre y edad
    { nombre: "Mar√≠a", edad: 18 },
    { nombre: "Pedro", edad: 22 },
    { nombre: "Ana", edad: 19 }
];
console.log("Original:", estudiantes);
// ORDENAMIENTO POR EDAD: Pasamos 'edad' como segundo par√°metro
console.log("Por edad:", selectionSortObjetos([...estudiantes], 'edad'));
// ORDENAMIENTO POR NOMBRE: Pasamos 'nombre' como segundo par√°metro
console.log("Por nombre:", selectionSortObjetos([...estudiantes], 'nombre'));

// Ejemplo 6: Casos especiales
console.log("\n6Ô∏è‚É£ CASOS ESPECIALES:");
// ARRAY VAC√çO: El algoritmo debe manejar arrays sin elementos
console.log("Array vac√≠o:", selectionSort([]));
// UN SOLO ELEMENTO: Ya est√° "ordenado" por definici√≥n
console.log("Un elemento:", selectionSort([42]));
// YA ORDENADO: El algoritmo funciona igual aunque no sea necesario
console.log("Ya ordenado:", selectionSort([1, 2, 3, 4, 5]));
// ORDENADO INVERSO: Caso que requiere m√°ximo trabajo
console.log("Ordenado inverso:", selectionSort([5, 4, 3, 2, 1]));
// ELEMENTOS DUPLICADOS: Debe manejar valores repetidos correctamente
console.log("Elementos duplicados:", selectionSort([3, 1, 4, 1, 5, 9, 2, 6, 5]));

// ===================================================================
// AN√ÅLISIS DE RENDIMIENTO
// ===================================================================

function analizarRendimiento() {
    console.log("\nüìä AN√ÅLISIS DE RENDIMIENTO:");
    console.log("‚ïê".repeat(40));
    
    // TAMA√ëOS DE PRUEBA: Diferentes cantidades de elementos para ver c√≥mo escala
    const tama√±os = [100, 1000, 5000];
    
    // PRUEBA CADA TAMA√ëO: Medimos tiempo de ejecuci√≥n para diferentes vol√∫menes de datos
    tama√±os.forEach(tama√±o => {
        // GENERACI√ìN DE DATOS: Creamos array aleatorio del tama√±o especificado
        // Math.random() * 1000 genera n√∫meros entre 0 y 999
        // Math.floor() redondea hacia abajo para obtener enteros
        const arr = Array.from({length: tama√±o}, () => Math.floor(Math.random() * 1000));
        
        // MEDICI√ìN DE TIEMPO: performance.now() da tiempo en milisegundos con alta precisi√≥n
        const inicio = performance.now();
        selectionSort([...arr]); // Ordenamos una copia del array
        const fin = performance.now();
        
        // REPORTE: Mostramos cu√°nto tiempo tom√≥ ordenar ese volumen de datos
        console.log(`Array de ${tama√±o} elementos: ${(fin - inicio).toFixed(2)} ms`);
    });
}

// EJECUTAR AN√ÅLISIS: Llamamos la funci√≥n para ver los resultados
analizarRendimiento();

// ===================================================================
// COMPARACI√ìN CON OTROS ALGORITMOS
// ===================================================================

console.log("\nüÜö COMPARACI√ìN:");
console.log("‚ïê".repeat(30));
console.log("Selection Sort vs Array.sort() nativo:");

// DATOS DE PRUEBA: Mismo array para comparaci√≥n justa
const arrayPrueba = Array.from({length: 1000}, () => Math.floor(Math.random() * 1000));

// PRUEBA 1: Nuestro Selection Sort
const inicio1 = performance.now();
selectionSort([...arrayPrueba]); // Usamos copia para no afectar la segunda prueba
const fin1 = performance.now();

// PRUEBA 2: M√©todo nativo de JavaScript
const inicio2 = performance.now();
// Array.sort() con funci√≥n de comparaci√≥n para ordenamiento num√©rico
// Sin la funci√≥n (a, b) => a - b, ordenar√≠a como strings: [1, 10, 2, 20, 3...]
[...arrayPrueba].sort((a, b) => a - b);
const fin2 = performance.now();

// RESULTADOS: Mostramos tiempos y calculamos la diferencia
console.log(`Selection Sort: ${(fin1 - inicio1).toFixed(2)} ms`);
console.log(`Array.sort(): ${(fin2 - inicio2).toFixed(2)} ms`);
// FACTOR DE DIFERENCIA: Cu√°ntas veces m√°s lento es nuestro algoritmo
console.log(`Diferencia: ${((fin1 - inicio1) / (fin2 - inicio2)).toFixed(2)}x m√°s lento`);

// ===================================================================
// VENTAJAS Y DESVENTAJAS
// ===================================================================

console.log("\n‚úÖ VENTAJAS DEL SELECTION SORT:");
console.log("‚Ä¢ Simple de entender e implementar");
console.log("‚Ä¢ Ordena in-place (no usa memoria extra)");
console.log("‚Ä¢ N√∫mero fijo de intercambios: O(n)");
console.log("‚Ä¢ Funciona bien para arrays peque√±os");

console.log("\n‚ùå DESVENTAJAS DEL SELECTION SORT:");
console.log("‚Ä¢ Complejidad O(n¬≤) - lento para arrays grandes");
console.log("‚Ä¢ No es estable (puede cambiar orden de elementos iguales)");
console.log("‚Ä¢ No es adaptativo (mismo tiempo si ya est√° ordenado)");
console.log("‚Ä¢ M√°s lento que otros algoritmos O(n¬≤) como Insertion Sort");