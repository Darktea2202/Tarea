// ===================================================================
// ALGORITMO DE ORDENAMIENTO: QUICK SORT
// ===================================================================

/**
 * Quick Sort - Ordenamiento R√°pido
 * 
 * FUNCIONAMIENTO (Divide y Vencer√°s):
 * 1. Elige un elemento como "pivot" (pivote)
 * 2. Particiona el array: elementos menores a la izquierda, mayores a la derecha
 * 3. Aplica recursivamente Quick Sort a ambas particiones
 * 4. Combina los resultados (ya est√°n ordenados por la partici√≥n)
 * 
 * COMPLEJIDAD:
 * - Mejor caso: O(n log n) - pivot divide el array por la mitad
 * - Caso promedio: O(n log n) 
 * - Peor caso: O(n¬≤) - pivot siempre es el menor o mayor elemento
 * - Espacio: O(log n) - debido a la recursi√≥n
 */

// ===================================================================
// IMPLEMENTACI√ìN PRINCIPAL - VERSI√ìN RECURSIVA
// ===================================================================

function quickSort(arr, inicio = 0, fin = arr.length - 1) {
    // CASO BASE: Si el subarray tiene 0 o 1 elemento, ya est√° ordenado
    // Esto detiene la recursi√≥n cuando no hay m√°s elementos que ordenar
    if (inicio < fin) {
        
        // PASO 1: PARTICI√ìN
        // La funci√≥n partition reorganiza el array y retorna la posici√≥n final del pivot
        // Despu√©s de partition:
        // - Todos los elementos a la izquierda del pivot son menores
        // - Todos los elementos a la derecha del pivot son mayores
        const indicePivot = partition(arr, inicio, fin);
        
        // PASO 2: RECURSI√ìN EN LA PARTICI√ìN IZQUIERDA
        // Ordenamos todos los elementos menores al pivot
        // Van desde 'inicio' hasta 'indicePivot - 1'
        quickSort(arr, inicio, indicePivot - 1);
        
        // PASO 3: RECURSI√ìN EN LA PARTICI√ìN DERECHA  
        // Ordenamos todos los elementos mayores al pivot
        // Van desde 'indicePivot + 1' hasta 'fin'
        quickSort(arr, indicePivot + 1, fin);
        
        // NOTA: No necesitamos "combinar" los resultados porque la partici√≥n
        // ya coloc√≥ cada elemento en el lado correcto del pivot
    }
    
    return arr; // Retornamos el array completamente ordenado
}

// ===================================================================
// FUNCI√ìN DE PARTICI√ìN - CORAZ√ìN DEL ALGORITMO
// ===================================================================

function partition(arr, inicio, fin) {
    // ELECCI√ìN DEL PIVOT: Usamos el √∫ltimo elemento como pivot
    // Otras estrategias: primer elemento, elemento del medio, mediana de tres
    const pivot = arr[fin];
    
    // √çNDICE DEL MENOR: Rastrea la posici√≥n donde deber√≠a ir el pr√≥ximo elemento menor
    // Inicialmente apunta a la posici√≥n antes del primer elemento
    let indiceMenor = inicio - 1;
    
    // PROCESO DE PARTICI√ìN: Recorremos desde 'inicio' hasta 'fin-1'
    // No incluimos 'fin' porque es nuestro pivot
    for (let j = inicio; j < fin; j++) {
        
        // COMPARACI√ìN: Si el elemento actual es menor o igual al pivot
        if (arr[j] <= pivot) {
            
            // INCREMENTAR √çNDICE: Movemos la frontera de elementos menores
            indiceMenor++;
            
            // INTERCAMBIO: Colocamos el elemento menor en su regi√≥n correcta
            // Intercambiamos arr[indiceMenor] con arr[j]
            [arr[indiceMenor], arr[j]] = [arr[j], arr[indiceMenor]];
            
            // ESTADO DESPU√âS DEL INTERCAMBIO:
            // [elementos ‚â§ pivot][elementos > pivot][elementos sin procesar][pivot]
        }
        
        // Si arr[j] > pivot, no hacemos nada, ya est√° en el lado correcto
    }
    
    // COLOCAR PIVOT EN SU POSICI√ìN FINAL:
    // El pivot debe ir despu√©s de todos los elementos menores
    [arr[indiceMenor + 1], arr[fin]] = [arr[fin], arr[indiceMenor + 1]];
    
    // RETORNAR POSICI√ìN DEL PIVOT: Esta ser√° la frontera para las llamadas recursivas
    return indiceMenor + 1;
}

// ===================================================================
// VERSI√ìN CON EXPLICACI√ìN PASO A PASO
// ===================================================================

function quickSortConPasos(arr, inicio = 0, fin = arr.length - 1, nivel = 0) {
    // INDENTACI√ìN VISUAL: Para mostrar el nivel de recursi√≥n
    const indent = "  ".repeat(nivel);
    
    // INFORMACI√ìN DEL LLAMADO: Mostramos qu√© parte estamos procesando
    console.log(`${indent}üîç QuickSort llamado: arr[${inicio}..${fin}] = [${arr.slice(inicio, fin + 1).join(', ')}]`);
    
    // CASO BASE: Verificamos si necesitamos seguir dividiendo
    if (inicio < fin) {
        
        // ANTES DE LA PARTICI√ìN: Mostramos el estado actual
        console.log(`${indent}üìç Pivot elegido: ${arr[fin]} (posici√≥n ${fin})`);
        
        // PARTICI√ìN CON SEGUIMIENTO
        const indicePivot = partitionConPasos(arr, inicio, fin, nivel);
        
        // DESPU√âS DE LA PARTICI√ìN: Mostramos c√≥mo qued√≥ el array
        console.log(`${indent}‚úÖ Despu√©s de partici√≥n: [${arr.join(', ')}]`);
        console.log(`${indent}üéØ Pivot ${arr[indicePivot]} est√° en posici√≥n final ${indicePivot}`);
        
        // LLAMADAS RECURSIVAS CON INFORMACI√ìN
        if (inicio < indicePivot - 1) {
            console.log(`${indent}‚¨ÖÔ∏è Procesando lado izquierdo...`);
            quickSortConPasos(arr, inicio, indicePivot - 1, nivel + 1);
        }
        
        if (indicePivot + 1 < fin) {
            console.log(`${indent}‚û°Ô∏è Procesando lado derecho...`);
            quickSortConPasos(arr, indicePivot + 1, fin, nivel + 1);
        }
        
        // FINALIZACI√ìN DEL NIVEL
        console.log(`${indent}üèÅ Completado nivel ${nivel}`);
    } else {
        // CASO BASE ALCANZADO
        console.log(`${indent}üõë Caso base: subarray de ${fin - inicio + 1} elemento(s) ya ordenado`);
    }
    
    return arr;
}

// FUNCI√ìN DE PARTICI√ìN CON SEGUIMIENTO VISUAL
function partitionConPasos(arr, inicio, fin, nivel) {
    const indent = "  ".repeat(nivel);
    const pivot = arr[fin];
    let indiceMenor = inicio - 1;
    
    console.log(`${indent}üîÑ Iniciando partici√≥n con pivot = ${pivot}`);
    
    // PROCESO DE PARTICI√ìN CON EXPLICACI√ìN
    for (let j = inicio; j < fin; j++) {
        console.log(`${indent}   Comparando ${arr[j]} con pivot ${pivot}`);
        
        if (arr[j] <= pivot) {
            indiceMenor++;
            
            if (indiceMenor !== j) {
                console.log(`${indent}   ‚ÜîÔ∏è Intercambiando ${arr[indiceMenor]} y ${arr[j]}`);
                [arr[indiceMenor], arr[j]] = [arr[j], arr[indiceMenor]];
            } else {
                console.log(`${indent}   ‚úÖ ${arr[j]} ya est√° en posici√≥n correcta`);
            }
            
            console.log(`${indent}   Estado: [${arr.join(', ')}]`);
        } else {
            console.log(`${indent}   ‚û°Ô∏è ${arr[j]} > ${pivot}, permanece a la derecha`);
        }
    }
    
    // COLOCAR PIVOT EN POSICI√ìN FINAL
    console.log(`${indent}üéØ Colocando pivot en posici√≥n final`);
    [arr[indiceMenor + 1], arr[fin]] = [arr[fin], arr[indiceMenor + 1]];
    
    return indiceMenor + 1;
}

// ===================================================================
// VERSI√ìN ITERATIVA (SIN RECURSI√ìN)
// ===================================================================

function quickSortIterativo(arr) {
    // SIMULAMOS LA RECURSI√ìN CON UNA PILA (STACK)
    // Cada elemento de la pila contiene [inicio, fin] de un subarray por procesar
    const pila = [[0, arr.length - 1]];
    
    console.log("üîÑ Iniciando Quick Sort iterativo");
    
    // MIENTRAS TENGAMOS SUBARRAYS POR PROCESAR
    while (pila.length > 0) {
        
        // EXTRAER SIGUIENTE SUBARRAY: Simulamos el "llamado" recursivo
        const [inicio, fin] = pila.pop();
        
        console.log(`üìç Procesando subarray [${inicio}..${fin}]: [${arr.slice(inicio, fin + 1).join(', ')}]`);
        
        // VERIFICAR SI NECESITA PARTICI√ìN
        if (inicio < fin) {
            
            // PARTICI√ìN: Igual que en la versi√≥n recursiva
            const indicePivot = partition(arr, inicio, fin);
            
            console.log(`‚úÖ Pivot ${arr[indicePivot]} colocado en posici√≥n ${indicePivot}`);
            
            // AGREGAR SUBARRAYS A LA PILA: En lugar de llamadas recursivas
            // Agregamos las dos mitades a la pila para procesarlas despu√©s
            
            // LADO IZQUIERDO: elementos menores al pivot
            if (inicio < indicePivot - 1) {
                pila.push([inicio, indicePivot - 1]);
                console.log(`üìù Agregado a pila: lado izquierdo [${inicio}..${indicePivot - 1}]`);
            }
            
            // LADO DERECHO: elementos mayores al pivot
            if (indicePivot + 1 < fin) {
                pila.push([indicePivot + 1, fin]);
                console.log(`üìù Agregado a pila: lado derecho [${indicePivot + 1}..${fin}]`);
            }
        }
        
        console.log(`üìä Estado actual del array: [${arr.join(', ')}]`);
        console.log(`üìö Elementos en pila: ${pila.length}`);
        console.log("‚îÄ".repeat(50));
    }
    
    console.log("üéâ Quick Sort iterativo completado");
    return arr;
}

// ===================================================================
// DIFERENTES ESTRATEGIAS PARA ELEGIR PIVOT
// ===================================================================

// ESTRATEGIA 1: Pivot como primer elemento
function quickSortPrimerElemento(arr, inicio = 0, fin = arr.length - 1) {
    if (inicio < fin) {
        // MOVER PRIMER ELEMENTO AL FINAL para usar la misma funci√≥n partition
        [arr[inicio], arr[fin]] = [arr[fin], arr[inicio]];
        
        const indicePivot = partition(arr, inicio, fin);
        quickSortPrimerElemento(arr, inicio, indicePivot - 1);
        quickSortPrimerElemento(arr, indicePivot + 1, fin);
    }
    return arr;
}

// ESTRATEGIA 2: Pivot como elemento del medio
function quickSortElementoMedio(arr, inicio = 0, fin = arr.length - 1) {
    if (inicio < fin) {
        // CALCULAR POSICI√ìN DEL MEDIO
        const medio = Math.floor((inicio + fin) / 2);
        
        // MOVER ELEMENTO DEL MEDIO AL FINAL
        [arr[medio], arr[fin]] = [arr[fin], arr[medio]];
        
        const indicePivot = partition(arr, inicio, fin);
        quickSortElementoMedio(arr, inicio, indicePivot - 1);
        quickSortElementoMedio(arr, indicePivot + 1, fin);
    }
    return arr;
}

// ESTRATEGIA 3: Mediana de tres (mejor rendimiento)
function quickSortMedianaDeTres(arr, inicio = 0, fin = arr.length - 1) {
    
    // FUNCI√ìN AUXILIAR: Encuentra la mediana entre tres elementos
    function medianaDeTres(arr, inicio, medio, fin) {
        // COMPARAMOS LOS TRES ELEMENTOS y retornamos el √≠ndice del valor medio
        if (arr[inicio] > arr[medio]) {
            if (arr[medio] > arr[fin]) return medio;          // inicio > medio > fin
            else if (arr[inicio] > arr[fin]) return fin;      // inicio > fin > medio
            else return inicio;                               // fin > inicio > medio
        } else {
            if (arr[inicio] > arr[fin]) return inicio;        // medio > inicio > fin
            else if (arr[medio] > arr[fin]) return fin;       // medio > fin > inicio
            else return medio;                                // fin > medio > inicio
        }
    }
    
    if (inicio < fin) {
        const medio = Math.floor((inicio + fin) / 2);
        
        // ENCONTRAR MEDIANA y moverla al final
        const indicePivot = medianaDeTres(arr, inicio, medio, fin);
        [arr[indicePivot], arr[fin]] = [arr[fin], arr[indicePivot]];
        
        const nuevoPivot = partition(arr, inicio, fin);
        quickSortMedianaDeTres(arr, inicio, nuevoPivot - 1);
        quickSortMedianaDeTres(arr, nuevoPivot + 1, fin);
    }
    return arr;
}

// ===================================================================
// EJEMPLOS DE USO Y COMPARACIONES
// ===================================================================

console.log("üöÄ EJEMPLOS DE QUICK SORT");
console.log("‚ïê".repeat(60));

// Ejemplo 1: Caso b√°sico
console.log("\n1Ô∏è‚É£ EJEMPLO B√ÅSICO:");
const numeros = [64, 34, 25, 12, 22, 11, 90];
console.log("Original:", numeros);
console.log("Ordenado:", quickSort([...numeros]));

// Ejemplo 2: Con explicaci√≥n paso a paso
console.log("\n2Ô∏è‚É£ EJEMPLO CON PASOS DETALLADOS:");
const numerosConPasos = [5, 2, 8, 1, 9];
console.log("‚ïê".repeat(50));
quickSortConPasos([...numerosConPasos]);

// Ejemplo 3: Versi√≥n iterativa
console.log("\n3Ô∏è‚É£ VERSI√ìN ITERATIVA:");
const numerosIterativo = [7, 3, 1, 9, 4];
console.log("Original:", numerosIterativo);
console.log("‚ïê".repeat(30));
quickSortIterativo([...numerosIterativo]);

// Ejemplo 4: Diferentes estrategias de pivot
console.log("\n4Ô∏è‚É£ COMPARACI√ìN DE ESTRATEGIAS DE PIVOT:");
const arrayPrueba = [9, 7, 5, 11, 12, 2, 14, 3, 10, 6];
console.log("Array original:", arrayPrueba);

console.log("\nüìç √öltimo elemento como pivot:");
console.log("Resultado:", quickSort([...arrayPrueba]));

console.log("\nüìç Primer elemento como pivot:");
console.log("Resultado:", quickSortPrimerElemento([...arrayPrueba]));

console.log("\nüìç Elemento del medio como pivot:");
console.log("Resultado:", quickSortElementoMedio([...arrayPrueba]));

console.log("\nüìç Mediana de tres como pivot:");
console.log("Resultado:", quickSortMedianaDeTres([...arrayPrueba]));

// Ejemplo 5: Casos especiales
console.log("\n5Ô∏è‚É£ CASOS ESPECIALES:");
console.log("Array vac√≠o:", quickSort([]));
console.log("Un elemento:", quickSort([42]));
console.log("Ya ordenado:", quickSort([1, 2, 3, 4, 5]));
console.log("Ordenado inverso:", quickSort([5, 4, 3, 2, 1]));
console.log("Elementos duplicados:", quickSort([3, 1, 4, 1, 5, 9, 2, 6, 5]));

// ===================================================================
// AN√ÅLISIS DE RENDIMIENTO
// ===================================================================

function analizarRendimientoQuickSort() {
    console.log("\nüìä AN√ÅLISIS DE RENDIMIENTO:");
    console.log("‚ïê".repeat(40));
    
    const tama√±os = [1000, 10000, 50000];
    
    tama√±os.forEach(tama√±o => {
        console.log(`\nüîç Probando con ${tama√±o} elementos:`);
        
        // CASO PROMEDIO: Array aleatorio
        const arrAleatorio = Array.from({length: tama√±o}, () => Math.floor(Math.random() * 1000));
        let inicio = performance.now();
        quickSort([...arrAleatorio]);
        let fin = performance.now();
        console.log(`  Aleatorio: ${(fin - inicio).toFixed(2)} ms`);
        
        // MEJOR CASO: Array ya ordenado (para mediana de tres)
        const arrOrdenado = Array.from({length: tama√±o}, (_, i) => i);
        inicio = performance.now();
        quickSortMedianaDeTres([...arrOrdenado]);
        fin = performance.now();
        console.log(`  Ya ordenado (mediana): ${(fin - inicio).toFixed(2)} ms`);
        
        // PEOR CASO: Array ordenado con √∫ltimo elemento como pivot
        inicio = performance.now();
        quickSort([...arrOrdenado]);
        fin = performance.now();
        console.log(`  Ya ordenado (√∫ltimo pivot): ${(fin - inicio).toFixed(2)} ms`);
    });
}

analizarRendimientoQuickSort();

// ===================================================================
// COMPARACI√ìN CON OTROS ALGORITMOS
// ===================================================================

console.log("\nüÜö COMPARACI√ìN DE ALGORITMOS:");
console.log("‚ïê".repeat(40));

const arrayComparacion = Array.from({length: 10000}, () => Math.floor(Math.random() * 1000));

// Quick Sort
let inicio = performance.now();
quickSort([...arrayComparacion]);
let fin = performance.now();
console.log(`Quick Sort: ${(fin - inicio).toFixed(2)} ms`);

// Array.sort() nativo
inicio = performance.now();
[...arrayComparacion].sort((a, b) => a - b);
fin = performance.now();
console.log(`Array.sort(): ${(fin - inicio).toFixed(2)} ms`);

// ===================================================================
// VENTAJAS Y DESVENTAJAS
// ===================================================================

console.log("\n‚úÖ VENTAJAS DEL QUICK SORT:");
console.log("‚Ä¢ Muy eficiente en promedio: O(n log n)");
console.log("‚Ä¢ Ordena in-place (usa poca memoria extra)");
console.log("‚Ä¢ Divide y vencer√°s: paralelizable");
console.log("‚Ä¢ Cache-friendly: accede a memoria de forma local");
console.log("‚Ä¢ Funciona bien con diferentes tipos de datos");

console.log("\n‚ùå DESVENTAJAS DEL QUICK SORT:");
console.log("‚Ä¢ Peor caso O(n¬≤) con pivots mal elegidos");
console.log("‚Ä¢ No es estable (puede cambiar orden de elementos iguales)");
console.log("‚Ä¢ Rendimiento depende de la elecci√≥n del pivot");
console.log("‚Ä¢ Usa recursi√≥n (puede causar stack overflow en arrays muy grandes)");
console.log("‚Ä¢ Sensible al estado inicial de los datos");

console.log("\nüí° CONSEJOS PARA OPTIMIZAR:");
console.log("‚Ä¢ Usar mediana de tres para elegir pivot");
console.log("‚Ä¢ Cambiar a insertion sort para subarrays peque√±os (< 10 elementos)");
console.log("‚Ä¢ Usar versi√≥n iterativa para arrays muy grandes");
console.log("‚Ä¢ Implementar detecci√≥n de arrays ya ordenados");